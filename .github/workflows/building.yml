name: Building Wheels

on: [ push ]

jobs:
  wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 20 # max for free user
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]
        torch-version: [ 1.8.1 1.9.0 ]
        cuda-version: [ 'cu111' ]
        exclude:
          - torch-version: 1.9.0
            cuda-version: 'cu113'
          - torch-version: 1.10.1
            cuda-version: 'cu111'

    steps:
      - uses: actions/checkout@v2

      #      - name: Proxy info
      #        run: |
      #          python -c "import os; print(os.environ.get('http_proxy'),os.environ.get('https_proxy')) "
      #
      #      - name: Set up Python ${{ matrix.python-version}}
      #        uses: actions/setup-python@v2
      #        with:
      #          python-version: ${{ matrix.python-version }}
      #
      #      - name: Set Pip Mirror in Mainland
      #        run: |
      #          pip install pip -U
      #          pip install wheel
      #          pip config set global.index-url https://pypi.doubanio.com/simple

      - name: Translate2 cuXY to X.Y.Z, e.g., cu111 to 11.1
        id: translator2
        run: |
          echo ::set-output name=full_version::\
                  $(jq -r '.["${{ matrix.cuda-version }}"]' < .github/workflows/mapping.json)

      - name: CUDA via Jimver
        uses: Jimver/cuda-toolkit@v0.2.5
        id: cuda-toolkit
        with:
          cuda: ${{steps.translator2.outputs.full_version}}

      - name: Tst
        run: |
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V

      - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        run: |
          pip install torch==${{ matrix.torch-version}} torchvision -f https://download.pytorch.org/whl/${{ matrix.cuda-version }}/torch_stable.html
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"

      #      - name: Install torch-scatter, sparse, and cluster
      #        run: |
      #          pip install torch-scatter -f https://data.pyg.org/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }}.html
      #          pip install torch-sparse -f https://data.pyg.org/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }}.html
      #          pip install torch-cluster -f https://data.pyg.org/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }}.html
      #
      #      - name: Install main package for CPU
      #        if: ${{ matrix.cuda-version == 'cpu' }}
      #        run: |
      #          FORCE_ONLY_CPU=1 pip install -e .
      #        shell:
      #          bash
      #
      - name: Install main package for GPU
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          python -c "import os;print(f'\033[1;35m CURRENT WORKING DIR: {os.getcwd()}\033[0m')"
          source .github/workflows/cuda/${{ matrix.cuda-version }}-${{ runner.os }}-env.sh

          echo "* [CUDA_HOME]: ${CUDA_HOME}"
          echo "* [LD_LIBRARY_PATH]: ${LD_LIBRARY_PATH}"
          echo "* [PATH]: ${PATH}"
          echo "* [FORCE_CUDA]: ${FORCE_CUDA}"
          echo "* [TORCH_CUDA_ARCH_LIST]: ${TORCH_CUDA_ARCH_LIST}"
        shell:
          bash

      - name: Clone and Build torch_cluster
        run: |

          git clone git@github.com:rusty1s/pytorch_cluster.git
          cd pytorch_cluster
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist
          pip install -e .
          python .github/tt.py

        shell:
          bash

      - name: Install AWS Cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-east-1


      - name: Upload wheel
        run: |
          aws s3 sync dist s3://thgsp/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers

